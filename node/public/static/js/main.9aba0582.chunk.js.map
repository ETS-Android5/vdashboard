{"version":3,"sources":["logo.svg","Row.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Row","props","state","edit","row","this","Number","temperature","alert","setState","axios","put","id","then","res","data","catch","error","Error","e","preventDefault","target","value","nextProps","nextContext","label","className","unit_id","onChange","handleChange","style","display","maxWidth","type","unix_timestamp","onClick","handleClick","React","Component","timeOut","Table","measurement","timer","average","headers","get","rows","forceUpdate","fetchData","setInterval","col","order","includes","sorted","sort","a","b","replace","marginTop","handleHeaderClick","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9aba0582.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport axios from 'axios';\n\n\nclass Row extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            edit: false\n        }\n    }\n\n    handleClick(row) {\n        const url = 'https://blooming-woodland-66726.herokuapp.com/api/v1/measurement/';\n        if(this.state.edit) { // true - you need to update\n            // Send request to backend and make it update\n            if(Number(row.temperature) < -3 || Number(row.temperature) > 3 ) {\n                alert('Please enter temperature between - 3 and +3');\n                return false;\n            }\n            this.setState({edit: false});\n\n            axios.put(url + row.id, {temperature: row.temperature}).then(res => res.data).catch(error => {\n                throw new Error(error);\n                console.dir(error);\n            });\n\n        } else {\n            this.setState({edit: true});\n        }\n    }\n\n    handleChange(e) {\n        e.preventDefault();\n        const {row} = this.state;\n        row.temperature = e.target.value;\n        this.setState({row});\n    }\n\n    componentWillMount() {\n        const { row } = this.props;\n        this.setState({ row});\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        const { row } = nextProps;\n        this.setState({ row});\n    }\n\n    render() {\n\n        const { row } = this.state;\n        let label = 'Edit';\n        let className = 'btn btn-default btn-small';\n\n        if(this.state.edit) {\n            label = 'Update';\n            className = 'btn btn-success btn-small';\n        }\n\n\n\n        return (\n            <tr>\n                <td>{row.unit_id}</td>\n                <td>{this.state.edit === true ? <input onChange={(e) => this.handleChange(e)} value={row.temperature} style={{display: 'inline-block', maxWidth: '150px'}} className=\"form-control\" type=\"text\"/> : row.temperature}</td>\n                <td>{row.unix_timestamp}</td>\n                <td>\n                    <button onClick={() => this.handleClick(row)} className={className}> {label} </button>\n                </td>\n            </tr>\n        )\n    }\n}\n\nexport default Row;\n","import React from 'react';\nimport Row from './Row';\nimport axios from 'axios';\nimport './App.css';\n\n\nconst timeOut = 10;\n\nclass Table extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            measurement: [\n                {id: 1, unit_id: 1, temperature: -3, unix_timestamp: 132131231},\n                {id: 2, unit_id: 2, temperature: -2, unix_timestamp: 1321989231},\n                {id: 3, unit_id: 3, temperature: -1, unix_timestamp: 109080931231},\n                {id: 4, unit_id: 4, temperature: -1, unix_timestamp: 109080931231},\n                {id: 5, unit_id: 5, temperature: -1, unix_timestamp: 109080931231},\n                {id: 6, unit_id: 6, temperature: 1, unix_timestamp: 109080931231},\n            ],\n            timer: timeOut,\n            average: 0,\n            headers : {\n                id : 'ID',\n                unit_id : 'Unit ID',\n                temperature: 'TEMP',\n                unix_timestamp: 'TS'\n            }\n        }\n    }\n\n    fetchData() {\n        const url = 'https://blooming-woodland-66726.herokuapp.com/api/v1/measurement';\n        axios.get(url).then(res => {\n\n            this.setState({measurement: res.data.rows, average: res.data.average});\n            this.forceUpdate();\n            return res.data;\n        }).catch(error => {\n            throw new Error(error);\n            console.dir(error);\n        });\n    }\n\n    componentWillMount() {\n        this.fetchData();\n        setInterval(() => {\n            let timer = this.state.timer;\n            if (timer <= 0) {\n                this.fetchData();\n                timer = timeOut;\n            }\n            this.setState({timer: timer - 1});\n        }, 1000, this)\n    }\n\n    handleHeaderClick(col) {\n        const {measurement, headers} = this.state;\n        const order = headers[col].includes('-') ? 1 : -1;\n\n        const sorted = measurement.sort((a, b) => {\n            if (a[col] > b[col]) return -1 * order;\n            if (a[col] < b[col]) return 1 * order;\n            if (a[col] === b[col]) return 0;\n        });\n        headers[col] = headers[col].includes('-') ? headers[col].replace('-', '') : '-' + headers[col];\n        this.setState({measurement: sorted, headers});\n    }\n\n    render() {\n        return (\n            <div style={{marginTop: '30px'}}>\n                <h2>Measurement</h2>\n                <p> Refreshing after :\n                    {\n                        ' ' + this.state.timer + '  '\n                    }\n                    seconds\n                </p>\n\n                <h4>Average temperature (last 5) : {this.state.average} C </h4>\n                <table className=\"table table-striped sortable\">\n                    <thead className=\"thead-dark\">\n                    <tr>\n                        <th onClick={() => this.handleHeaderClick('unit_id')}>{this.state.headers.unit_id}</th>\n                        <th onClick={() => this.handleHeaderClick('temperature')}>{this.state.headers.temperature}</th>\n                        <th onClick={() => this.handleHeaderClick('unix_timestamp')}>{this.state.headers.unix_timestamp}</th>\n                        <th>Edit</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                    {\n                        this.state.measurement.map(row =>\n                            <Row key={row.id} row={row}/>\n                        )\n                    }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Table;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\n\nclass App extends React.Component {\n\n  render() {\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Lab 02</h1>\n          </header>\n          <Table />\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}